{"version":3,"sources":["utils/tips.js","utils/speecher.js","components/button.jsx","components/analyser.jsx","components/speecher.jsx","App.js","reportWebVitals.js","index.js","utils/commands.js"],"names":["module","exports","EventEmitter","require","SpeechRecognition","window","webkitSpeechRecognition","console","log","warn","Speecher","appendHistory","isIgnoring","isActivated","end","Date","now","duration","startTime","transcriptObj","text","currentTransciption","start","type","history","push","reset","emit","events","RESULT","getCommandsCallbacks","callbacks","trim","toLowerCase","commands","map","command","name","includes","COMMAND","callback","argument","e","isStarted","restart","getCurrent","getPreview","handleResult","event","transcription","Array","from","results","result","transcript","join","split","length","setTransciption","isFinal","transcribeCommand","callbackObj","init","recognition","interimResults","addEventListener","END","ignore","ignoring","IGNORE","notIgnore","NOT_IGNORE","activated","registerCommand","commandText","commandName","isArray","item","toString","prefix","REGISTER_COMMNAD","setPrefix","START","stop","STOP","toggle","toggleIgnore","this","TRANSCRIPT","speecher","Button","render","label","icon","className","props","onClick","React","Component","Analyser","componentDidMount","canvasCtx","canvasRef","current","getContext","navigator","getUserMedia","audio","stream","context","AudioContext","analyser","createAnalyser","createMediaStreamSource","connect","draw","errorMicRequest","requestAnimationFrame","canvas","clearRect","width","height","frequencyBinCount","dataArray","Uint8Array","getByteFrequencyData","x","y","color","fillStyle","i","barsNum","fillRect","ref","createRef","secondary","SpeecherComponent","append","forceUpdate","componentDidUpdate","scrollContainer","createDialogBox","id","formatTime","formatSeconds","define","commnads","on","nextTip","setState","buttonType","buttonIcon","faMicrophoneAltSlash","faMicrophoneAlt","clearMessages","insertMark","startLog","endLog","cleanLastMessage","splice","time","date","getHours","padStart","getMinutes","getSeconds","seconds","parseInt","getHistory","preview","getColor","getTip","tips","state","currentTip","el","speecherDialogs","scrollTo","top","scrollHeight","behavior","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"8GAAAA,EAAOC,QAAU,CACb,gFACA,0EACA,qFACA,mFACA,yF,2NCLEC,EAAeC,EAAQ,IAEvBC,EAAoBC,OAAOD,mBAAqBC,OAAOC,wBAEzDF,EAIAG,QAAQC,IAAI,sDAHZD,QAAQE,KAAK,sF,IAOXC,E,kDAEF,aAAc,IAAD,8BACT,gBAmBJC,cAAgB,WACZ,GAAG,EAAKC,aAAc,OAAO,eAC7B,IAAI,EAAKC,cAAe,OAAO,eAE/B,IAAMC,EAAMC,KAAKC,MACXC,EAAWH,EAAM,EAAKI,UAEtBC,EAAgB,CAClBC,KAAM,EAAKC,oBACXC,MAAO,EAAKJ,UACZJ,MACAG,WACAM,KAAM,iBAMV,OAHA,EAAKC,QAAQC,KAAKN,GAClB,EAAKO,QACL,EAAKC,KAAKjB,EAASkB,OAAOC,OAAQV,GAC3B,gBAtCE,EAyCbW,qBAAuB,SAACV,GACpB,IAAIW,EAAY,GAchB,OAbAX,EAAOA,EAAKY,OAAOC,cACnB,EAAKC,SACJC,KAAI,SAAAC,GAQD,OAPIA,EAAQC,KAAKC,SAASlB,KACtB,EAAKO,KAAKjB,EAASkB,OAAOW,QAASnB,GACnCW,EAAUN,KAAK,CACXe,SAAUJ,EAAQI,SAClBC,SAAUrB,KAGXgB,KAGJL,GAxDE,EA2DbjB,IAAM,SAAC4B,GACH,EAAKC,WAAY,EACjB,EAAKC,WA7DI,EAgEbC,WAAa,WACT,OAAO,EAAKxB,qBAjEH,EAoEbyB,WAAa,WACT,IAAMhC,EAAMC,KAAKC,MACXC,EAAWH,EAAM,EAAKI,UAS5B,MARsB,CAClBE,KAAM,EAAKyB,aACXvB,MAAO,EAAKJ,UACZJ,MACAG,WACAM,KAAM,kBA5ED,EAkFbwB,aAAe,SAACC,GACZ,IAAI,EAAKnC,cAAe,OAAO,eAC/B,IAAMoC,EAAgBC,MAAMC,KAAKH,EAAMI,SAASjB,KAAI,SAAAkB,GAAM,OAAIA,EAAO,MAAIlB,KAAI,SAAAkB,GAAM,OAAGA,EAAOC,cAAYC,KAAK,IAO9G,GALa,GADCN,EAAcO,MAAM,KAAKC,SACvB,EAAKvC,UAAYH,KAAKC,OAEtC,EAAK0C,gBAAgBT,GAELD,EAAMI,QAAQ,GAAGO,QACtB,CACP,IAAM5B,EAAY,EAAKD,qBAAqBmB,IACxClB,EAAU0B,QAAU,GAAK,EAAKG,oBAC9B,EAAKjD,gBAGT,EAAKe,QANE,oBAQgBK,GARhB,IAQP,IAAI,EAAJ,qBAAiC,CAAC,IAA1B8B,EAAyB,QAC7BA,EAAYrB,SAASqB,EAAYpB,WAT9B,+BAaX,OAAO,gBAxGE,EA2GbqB,KAAO,WAIH,OAHA,EAAKC,YAAYC,gBAAiB,EAClC,EAAKD,YAAYE,iBAAiBvD,EAASkB,OAAOC,QAAQ,SAACmB,GAAS,EAAKD,aAAaC,MACtF,EAAKe,YAAYE,iBAAiBvD,EAASkB,OAAOsC,IAAK,EAAKpD,KACrD,gBA/GE,EAkHbqD,OAAS,WAGL,OAFA,EAAKC,UAAW,EAChB,EAAKzC,KAAKjB,EAASkB,OAAOyC,OAA1B,gBACO,gBArHE,EAwHbC,UAAY,WAGR,OAFA,EAAKF,UAAW,EAChB,EAAKzC,KAAKjB,EAASkB,OAAO2C,WAA1B,gBACO,gBA3HE,EA8Hb1D,YAAc,WACV,OAAO,EAAK2D,WA/HH,EAkIb5D,WAAa,WACT,OAAO,EAAKwD,UAnIH,EA6IbK,gBAAkB,SAACC,EAAalC,GAC5B,GAAwB,mBAAbA,EAAwB,CAC/B,IAAImC,EAAcD,EACbxB,MAAM0B,QAAQF,KAAcC,EAAc,CAACD,IAQhD,IAAMtC,EAAU,CAACC,KANjBsC,EAAcA,EAAYxC,KAAI,SAAA0C,GAG1B,OAFAA,EAAKC,WAAW9C,OAAOC,cACvB4C,EAAO,CAAC,EAAKE,OAAQF,GAAMtB,KAAK,KAAKvB,UAILQ,YACpC,EAAKN,SAAST,KAAKW,GACnB,EAAKT,KAAKjB,EAASkB,OAAOoD,iBAAkB5C,KA1JvC,EA8JbV,MAAQ,WACJ,EAAKL,oBAAsB,GAC3B,EAAKH,UAAYH,KAAKC,OAhKb,EAmKb4B,QAAU,WACH,EAAK/B,eAAe,EAAKS,SApKnB,EAuKb2D,UAAY,SAACF,GAET,OADA,EAAKA,OAASA,EAAOD,WAAW7C,cAAcD,OACvC,gBAzKE,EA4KbV,MAAQ,WAWJ,OAVK,EAAKT,gBACN,EAAK2D,WAAY,EACjB,EAAK7C,KAAKjB,EAASkB,OAAOsD,MAA1B,iBAGC,EAAKvC,YACN,EAAKoB,YAAYzC,QACjB,EAAKqB,WAAY,GAGd,gBAvLE,EA0LbwC,KAAO,WACH,OAAK,EAAKtE,eACV,EAAK2D,WAAY,EAEb,EAAK7B,WACL,EAAKoB,YAAYoB,OAGrB,EAAKxC,WAAY,EACjB,EAAKtB,oBAAsB,GAC3B,EAAKM,KAAKjB,EAASkB,OAAOwD,KAA1B,gBACO,gBAVyB,gBA3LvB,EAwMbC,OAAS,WACF,EAAK1C,UACJ,EAAKwC,OAGL,EAAK7D,SA7MA,EAiNbgE,aAAe,WAUX,OATI,EAAKlB,SACL,EAAKE,YAGL,EAAKH,SAGT5D,QAAQC,IAAI,WAAY,EAAK4D,UAEtB,gBAzNP,EAAK/C,oBAAsB,GAC3B,EAAKG,QAAU,GACf,EAAKU,SAAW,GAChB,EAAK6C,OAAS,GAEd,EAAKnB,mBAAoB,EACzB,EAAKQ,UAAW,EAEhB,EAAKL,YAAc,IAAI3D,EACvB,EAAKoE,WAAY,EACjB,EAAK7B,WAAY,EACjB,EAAKzB,UAAYH,KAAKC,MAEtB,EAAKY,OAASlB,EAASkB,OAEvB,EAAKkC,OAjBI,E,mDAsIb,SAAgBb,GACZ,OAAIsC,KAAK1E,eACT0E,KAAKlE,oBAAsB4B,EAC3BsC,KAAK5D,KAAKjB,EAASkB,OAAO4D,WAAYvC,GAC/BsC,MAHwBA,S,GAzIhBrF,GAiOvBQ,EAASkB,OAAS,CACdsC,IAAK,MACL3B,QAAS,UACTiD,WAAY,aACZR,iBAAkB,kBAClBnD,OAAQ,SACRqD,MAAO,QACPE,KAAM,OACNf,OAAQ,SACRE,WAAY,aAGhB,IACekB,EADE,IAAI/E,E,wDClPAgF,E,4MAEjBC,OAAS,WACL,IAAIC,EAAQ,KACRC,EAAO,KAEPC,EAAY,CAAC,SADN,EAAKC,MAAMxE,MAAQ,WAW9B,OARI,EAAKwE,MAAMF,OACXA,EAAQ,qBAAKC,UAAU,cAAf,SAA6B,cAAC,IAAD,CAAiBD,KAAM,EAAKE,MAAMF,UAGvE,EAAKE,MAAMH,QACXA,EAAS,qBAAKE,UAAU,eAAf,SAA+B,EAAKC,MAAMH,SAInD,sBAAKE,UAAWA,EAAUvC,KAAK,KAAMyC,QAAS,EAAKD,MAAMC,QAAzD,UACKH,EACAD,M,YAnBmBK,IAAMC,WCHrBC,G,wDAEjB,WAAYJ,GAAO,IAAD,8BACd,cAAMA,IAQVK,kBAAoB,WAChB,EAAKC,UAAY,EAAKC,UAAUC,QAAQC,WAAW,MAGnDC,UAAUC,aADM,CAACC,OAAO,IACQ,SAACC,GAC7B,IAAMC,EAAU,IAAIC,aACpB,EAAKC,SAAWF,EAAQG,iBACTH,EAAQI,wBAAwBL,GACxCM,QAAQ,EAAKH,UAEpB,EAAKI,SACN,EAAKC,kBApBM,EAuBlBD,KAAO,WACiBE,sBAAsB,EAAKF,MAA/C,IACMG,EAAS,EAAKhB,UAAUC,QAE9B,GAAI,EAAKF,UAAU,CAEf,EAAKA,UAAUkB,UAAU,EAAG,EAAGD,EAAOE,MAAOF,EAAOG,QAEpD,IAAMhE,EAAS,EAAKsD,SAASW,kBACvBC,EAAY,IAAIC,WAAWnE,GACjC,EAAKsD,SAASc,qBAAqBF,GAEnC,IAAIG,EAAI,EACJC,EAAI,EAEJN,EAAS,EAETO,EAAQ,UAERA,EADsB,mBAAf,EAAKA,MACJ,EAAKA,QAGL,EAAKA,OAAS,UAI1B,EAAK3B,UAAU4B,UAAYD,EAE3B,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAKC,QAASD,IAC9BJ,EAAQ,EAAJI,EACJT,EAASE,EAAUO,GAAK,EAExBH,GAAKT,EAAOG,OAASA,GAAQ,EAE7B,EAAKpB,UAAU+B,SAASN,EAAGC,EApBnB,EAoB6BN,KAzD/B,EA8DlBL,gBAAkB,WACd7G,QAAQC,IAAI,mDA/DE,EAkElBmF,OAAS,WACL,OACI,mCACI,wBAAQG,UAAU,kBAAkBuC,IAAK,EAAK/B,UAAWmB,OAAO,KAAKD,MAAM,WAnEnF,EAAKlB,UAAYL,IAAMqC,YACvB,EAAKjC,UAAY,KACjB,EAAKU,SAAW,KAChB,EAAKoB,QAAU,IACf,EAAKH,MAAQ,EAAKjC,MAAMiC,OAAS,UANnB,E,UAFgB/B,IAAMC,Y,QCQtCqC,G,MAAY,aACGC,E,kDACnB,WAAYzC,GAAO,IAAD,8BAChB,cAAMA,IAaR0C,OAAS,SAACtH,GACR,EAAKK,QAAQC,KAAKN,GAClB,EAAKuH,eAhBW,EAmBlBtC,kBAAoB,WAClBX,EAASnE,SApBO,EAuBlBqH,mBAAqB,WACnB,EAAKC,mBAxBW,EA2BlBC,gBAAkB,WAA6C,IAA5CvF,EAA2C,kFAA5BA,GAA4B,IAAhBhC,MAAO,IAAIwH,EAAK,uCAC1C,oBAAPA,IAAoBA,EAAKxF,EAAWhC,OAE/C,IAAMwE,EAAY,CAAC,aAAcxC,EAAW/B,MAE5C,OACE,sBAAcuE,UAAWA,EAAUvC,KAAK,KAAxC,UACE,sBAAKuC,UAAU,QAAf,UAAwB,EAAKiD,WAAWzF,EAAWhC,OAAnD,KAA6D,EAAK0H,cAAc1F,EAAWrC,aAC3F,mBAAG6E,UAAU,OAAb,SAAqBxC,EAAWlC,SAFxB0H,IAjCI,EAwClBG,OAAS,WACPxD,EAAStB,SAETsB,EAASR,UAAUiE,IAASnE,QAE5BU,EAAS0D,GAAG1D,EAAS7D,OAAOW,SAAS,WACnC,EAAK6G,aAGP3D,EAAS0D,GAAG1D,EAAS7D,OAAO4D,YAAY,SAACrE,GACvC,EAAKuH,iBAGPjD,EAAS0D,GAAG1D,EAAS7D,OAAOC,QAAQ,SAACV,GACnC,EAAKsH,OAAOtH,MAGdsE,EAAS0D,GAAG1D,EAAS7D,OAAOyC,QAAQ,WAClC,EAAKgF,SAAS,CAACC,WAAYf,EAAWgB,WAAYC,SAGpD/D,EAAS0D,GAAG1D,EAAS7D,OAAO2C,YAAY,WACtC,EAAK8E,SAAS,CAACC,WAjEL,UAiE0BC,WAAYE,SAGlDhE,EAAShB,gBAAgByE,IAASQ,eAAe,WAC/C,EAAKlI,QAAU,GACf,EAAKkH,iBAGPjD,EAAShB,gBAAgByE,IAASS,YAAY,SAACvH,GAC7C,EAAKqG,OAAO,CACVrH,KAAM,MACNG,KAAM,OACND,MAAOP,KAAKC,MACZF,IAAKC,KAAKC,MACVC,SAAU,OAIdwE,EAAShB,gBAAgByE,IAASU,UAAU,WAC1CnE,EAASnB,eAGXmB,EAAShB,gBAAgByE,IAASW,QAAO,WACvCpE,EAAStB,YAGXsB,EAAShB,gBAAgByE,IAASY,kBAAkB,WAClD,EAAKtI,QAAQuI,QAAQ,EAAE,GACvB,EAAKrB,kBA1FS,EA8FlBK,WAAa,SAACiB,GACZ,IAAMC,EAAO,IAAIlJ,KAAKiJ,GACtB,OACE,iCAAOC,EAAKC,WAAWpF,WAAWqF,SAAS,EAAG,KAA9C,IAAqDF,EAAKG,aAAatF,WAAWqF,SAAS,EAAG,KAA9F,IAAqGF,EAAKI,aAAavF,WAAWqF,SAAS,EAAG,SAjGhI,EAqGlBnB,cAAgB,SAACgB,GACf,IAAMM,EAAUC,SAASP,EAAO,KAChC,OACE,iCAAOM,EAAP,QAxGc,EA4GlBE,WAAa,WACX,IAAMhJ,EAAU,GAChB,IAAI,IAAI0G,KAAK,EAAK1G,QAAQ,CACxB,IAAI8B,EAAa,EAAK9B,QAAQ0G,GAC9B1G,EAAQC,KAAK,EAAKoH,gBAAgBvF,IAGpC,OAAO9B,GAnHS,EAsHlBqB,WAAa,WACX,GAAI4C,EAAS7E,aAAc,OAAO,KAClC,IAAM6J,EAAUhF,EAAS3C,aACzB,MAA2B,IAAvB2H,EAAQrJ,KAAKY,OAAqB,KAC/B,EAAK6G,gBAAgB4B,EAAS,YA1HrB,EA6HlBC,SAAW,WACT,IAAI1C,EAAQ,UAEZ,OADIvC,EAAS7E,eAAcoH,EAAQ,WAC5BA,GAhIS,EAmIlB2C,OAAS,WACP,OAAOC,IAAK,EAAKC,MAAMC,aApIP,EAuIlB1B,QAAU,WACR,IAAI0B,EAAa,EAAKD,MAAMC,WAAa,EACrCA,GAAcF,IAAKnH,SAAQqH,EAAa,GAC5C,EAAKzB,SAAS,CAACyB,gBA1IC,EAgKlBlC,gBAAkB,WAChB,IAAMmC,EAAK,EAAKC,gBAAgBzE,QAC7BwE,GACDA,EAAGE,SAAS,CAACC,IAAKH,EAAGI,aAAcC,SAAU,YAnK/B,EAuKlB/F,OAAS,WACPI,EAASH,gBAtKT,EAAK9D,QAAU,GACf,EAAKwJ,gBAAkB/E,IAAMqC,YAE7B,EAAKuC,MAAQ,CACXvB,WAAYf,EACZgB,WAAYC,IACZsB,WAAY,GAGd,EAAK7B,SAXW,E,0CA6IlB,WAAS,IAAD,OACN,OACE,sBAAKnD,UAAU,qBAAf,UACE,sBAAKA,UAAU,mBAAmBuC,IAAK9C,KAAKyF,gBAA5C,UACGzF,KAAKiF,aACLjF,KAAK1C,gBAER,qBAAKiD,UAAU,2BACf,sBAAKA,UAAU,sBAAf,UACE,cAAC,EAAD,CAAQvE,KAAMgE,KAAKsF,MAAMvB,WAAYzD,KAAMN,KAAKsF,MAAMtB,WAAYvD,QAAS,WAAK,EAAKX,YACrF,cAAC,EAAD,CAAU2C,MAAOzC,KAAKmF,cAExB,qBAAK5E,UAAU,eAAf,SACGP,KAAKoF,kB,GA3J+B1E,IAAMC,WCXhCmF,E,4JACnB,WACE,OACI,mCACI,cAAC,EAAD,U,GAJqBpF,IAAMC,WCUxBoF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASpG,OACP,cAAC,IAAMqG,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K,gBChBAtL,EAAOC,QAAU,CACb8E,OAAQ,aAER+E,iBAAkB,CACd,4BACA,4BACA,6BACA,8BACA,8BACA,+BAEA,8BACA,8BACA,6BACA,sCACA,sCACA,sCAGJJ,cAAe,CACX,kBACA,mBACA,mBACA,kBACA,aACA,aACA,4BACA,6BAGJC,WAAY,CACR,4BACA,wBACA,yBACA,6BACA,6BACA,yBACA,kBAGJC,SAAU,CACN,cACA,4BACA,UACA,cACA,cACA,WAGJC,OAAQ,CACJ,iBACA,aACA,eACA,6BACA,WACA,YACA,SACA,Y","file":"static/js/main.2cf8c08c.chunk.js","sourcesContent":["module.exports = [\n    \"Você pode iniciar o transcritor através do comando `computador iniciar`\",\n    \"Você pode encerrar o log através do comando `computador encerrar`\",\n    \"Tente inserir uma marcação com o comando `computador inserir marcação`\",\n    \"Limpe as mensagem rapidamente com um comando de voz: `compudar limpar mensagens`\",\n    \"Limpe apenas a última mensagem com o comando `computar limpar última mensagem`\"\n]","const EventEmitter = require(\"events\");\n\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\n\nif(!SpeechRecognition){\n    console.warn('A ferramenta de reconhecimento de voz não está disponível neste navegador')\n}\nelse{\n    console.log('Ferramenta de reconhecimento de voz está ativa!')\n}\n\n\nclass Speecher extends EventEmitter{\n\n    constructor(){\n        super();\n        this.currentTransciption = '';\n        this.history = [];\n        this.commands = [];\n        this.prefix = '';\n\n        this.transcribeCommand = false;\n        this.ignoring = false;\n\n        this.recognition = new SpeechRecognition();\n        this.activated = false;\n        this.isStarted = false;\n        this.startTime = Date.now();\n\n        this.events = Speecher.events;\n\n        this.init();\n    }\n\n    appendHistory = ()=>{\n        if(this.isIgnoring()) return this;\n        if(!this.isActivated()) return this;\n\n        const end = Date.now()\n        const duration = end - this.startTime\n\n        const transcriptObj = {\n            text: this.currentTransciption,\n            start: this.startTime,\n            end,\n            duration,\n            type: 'transcription'\n        }\n\n        this.history.push(transcriptObj);\n        this.reset()\n        this.emit(Speecher.events.RESULT, transcriptObj)\n        return this;\n    }\n\n    getCommandsCallbacks = (text)=>{\n        let callbacks = []\n        text = text.trim().toLowerCase()\n        this.commands\n        .map(command => {\n            if (command.name.includes(text)){\n                this.emit(Speecher.events.COMMAND, text)\n                callbacks.push({\n                    callback: command.callback,\n                    argument: text\n                });\n            }\n            return command\n        })\n\n        return callbacks\n    }\n\n    end = (e)=>{\n        this.isStarted = false;\n        this.restart()\n    }\n\n    getCurrent = ()=>{\n        return this.currentTransciption\n    }\n\n    getPreview = ()=>{\n        const end = Date.now()\n        const duration = end - this.startTime\n        const transcriptObj = {\n            text: this.getCurrent(),\n            start: this.startTime,\n            end,\n            duration,\n            type: 'transcription'\n        }\n\n        return transcriptObj\n    }\n\n    handleResult = (event)=>{\n        if(!this.isActivated()) return this;\n        const transcription = Array.from(event.results).map(result => result[0]).map(result=> result.transcript).join('');\n        const words = transcription.split(' ').length\n        if (words == 1) this.startTime = Date.now()\n\n        this.setTransciption(transcription);\n        \n        const isFinal = event.results[0].isFinal\n        if(isFinal){\n            const callbacks = this.getCommandsCallbacks(transcription)\n            if (callbacks.length <= 0 || this.transcribeCommand){\n                this.appendHistory();\n            }\n            \n            this.reset();\n\n            for(let callbackObj of callbacks){\n                callbackObj.callback(callbackObj.argument)\n            }\n        }\n\n        return this\n    }\n\n    init = ()=>{\n        this.recognition.interimResults = true\n        this.recognition.addEventListener(Speecher.events.RESULT, (event)=>{this.handleResult(event)});\n        this.recognition.addEventListener(Speecher.events.END, this.end);\n        return this;\n    }\n\n    ignore = ()=>{\n        this.ignoring = true;\n        this.emit(Speecher.events.IGNORE, this)\n        return this;\n    }\n\n    notIgnore = ()=>{\n        this.ignoring = false;\n        this.emit(Speecher.events.NOT_IGNORE, this)\n        return this;\n    }\n\n    isActivated = ()=>{\n        return this.activated\n    }\n\n    isIgnoring = ()=>{\n        return this.ignoring\n    }\n\n    setTransciption(transcription){\n        if(!this.isActivated()) return this;\n        this.currentTransciption = transcription\n        this.emit(Speecher.events.TRANSCRIPT, transcription);\n        return this;\n    }\n\n    registerCommand = (commandText, callback)=>{\n        if (typeof(callback) == 'function'){\n            let commandName = commandText\n            if (!Array.isArray(commandText)) commandName = [commandText]\n\n            commandName = commandName.map(item=>{\n                item.toString().trim().toLowerCase()\n                item = [this.prefix, item].join(' ').trim()\n                return item\n            })\n\n            const command = {name: commandName, callback}\n            this.commands.push(command)\n            this.emit(Speecher.events.REGISTER_COMMNAD, command)\n        }\n    }\n\n    reset = ()=>{\n        this.currentTransciption = '';\n        this.startTime = Date.now()\n    }\n\n    restart = ()=>{\n        if(this.isActivated()) this.start()\n    }\n\n    setPrefix = (prefix)=>{\n        this.prefix = prefix.toString().toLowerCase().trim()\n        return this\n    }\n\n    start = ()=>{\n        if (!this.isActivated()){\n            this.activated = true;\n            this.emit(Speecher.events.START, this)\n        }\n        \n        if (!this.isStarted){\n            this.recognition.start();\n            this.isStarted = true\n        }\n\n        return this;\n    }\n\n    stop = ()=>{\n        if (!this.isActivated()) return this;\n        this.activated = false;\n\n        if (this.isStarted){\n            this.recognition.stop()\n        }\n\n        this.isStarted = false;\n        this.currentTransciption = '';\n        this.emit(Speecher.events.STOP, this)\n        return this\n    }\n\n    toggle = ()=>{\n        if(this.isStarted){\n            this.stop()\n        }\n        else{\n            this.start()\n        }\n    }\n\n    toggleIgnore = ()=>{\n        if (this.ignoring){\n            this.notIgnore()\n        }\n        else{\n            this.ignore()\n        }\n\n        console.log('ignoring', this.ignoring)\n\n        return this;\n    }\n}\n\nSpeecher.events = {\n    END: 'end',\n    COMMAND: 'command',\n    TRANSCRIPT: 'transcript',\n    REGISTER_COMMNAD: 'registerCommand',\n    RESULT: 'result',\n    START: 'start',\n    STOP: 'stop',\n    IGNORE: 'ignore',\n    NOT_IGNORE: 'notIgnore'\n}\n\nconst speecher = new Speecher();\nexport default speecher","import React from 'react'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\n\n\n\nimport './button.css'\n\nexport default class Button extends React.Component{\n\n    render = ()=>{\n        let label = null;\n        let icon = null;\n        let type = this.props.type || 'primary';\n        let className = ['button', type];\n\n        if (this.props.icon){\n            icon = (<div className=\"button-icon\"><FontAwesomeIcon icon={this.props.icon}/></div>)\n        }\n\n        if (this.props.label){\n            label = (<div className=\"button-label\">{this.props.label}</div>)\n        }\n\n        return(\n            <div className={className.join(' ')} onClick={this.props.onClick}>\n                {icon}\n                {label}\n            </div>\n        )\n    }\n}","import React from \"react\";\n\nimport './analyser.css'\n\nexport default class Analyser extends React.Component{\n\n    constructor(props){\n        super(props)\n        this.canvasRef = React.createRef()\n        this.canvasCtx = null\n        this.analyser = null\n        this.barsNum = 100\n        this.color = this.props.color || '#0c6e27'\n    }\n\n    componentDidMount = ()=>{\n        this.canvasCtx = this.canvasRef.current.getContext('2d');\n        \n        const options = {audio: true}\n        navigator.getUserMedia(options, (stream)=>{\n            const context = new AudioContext()\n            this.analyser = context.createAnalyser()\n            const source = context.createMediaStreamSource(stream)\n            source.connect(this.analyser)\n\n            this.draw();\n        }, this.errorMicRequest)\n    }\n\n    draw = ()=>{\n        const drawRequest = requestAnimationFrame(this.draw);\n        const canvas = this.canvasRef.current;\n\n        if (this.canvasCtx){\n\n            this.canvasCtx.clearRect(0, 0, canvas.width, canvas.height)\n\n            const length = this.analyser.frequencyBinCount\n            const dataArray = new Uint8Array(length)\n            this.analyser.getByteFrequencyData(dataArray)\n\n            let x = 0;\n            let y = 0;\n            let width = 2;\n            let height = 0;\n\n            let color = '#0c6e27'\n            if (typeof(this.color) == 'function'){\n                color = this.color()\n            }\n            else{\n                color = this.color || '#0c6e27'\n            }\n\n\n            this.canvasCtx.fillStyle = color\n\n            for (let i = 0; i < this.barsNum; i++){\n                x = i * 3;\n                height = dataArray[i] / 3;\n\n                y = (canvas.height - height)/2\n\n                this.canvasCtx.fillRect(x, y, width, height)\n            }\n        }\n    }\n\n    errorMicRequest = ()=>{\n        console.log('Usuário não concedeu acesso ao microfone');\n    }\n\n    render = ()=>{\n        return(\n            <>\n                <canvas className=\"analyser-canvas\" ref={this.canvasRef} height=\"60\" width=\"300\"></canvas>\n            </>\n        )\n    }\n}","import React from \"react\";\nimport speecher from \"../utils/speecher\";\nimport commnads from \"../utils/commands\";\nimport tips from \"../utils/tips\";\n\nimport Button from '../components/button';\nimport Analyser  from \"./analyser\";\nimport {faMicrophoneAlt, faMicrophoneAltSlash} from '@fortawesome/free-solid-svg-icons'\n\nimport './speecher.css';\n\nconst primary = 'primary';\nconst secondary = 'secondary';\nexport default class SpeecherComponent extends React.Component{\n  constructor(props){\n    super(props)\n    this.history = [];\n    this.speecherDialogs = React.createRef()\n\n    this.state = {\n      buttonType: secondary,\n      buttonIcon: faMicrophoneAltSlash,\n      currentTip: 0\n    }\n\n    this.define()\n  }\n\n  append = (transcriptObj)=>{\n    this.history.push(transcriptObj)\n    this.forceUpdate()\n  }\n\n  componentDidMount = ()=>{\n    speecher.start();\n  }\n\n  componentDidUpdate = ()=>{\n    this.scrollContainer()\n  }\n\n  createDialogBox = (transcript={...transcript, start: 0}, id)=>{\n    if (typeof(id) == 'undefined') id = transcript.start;\n\n    const className = [\"dialog-box\", transcript.type]\n\n    return(\n      <div key={id} className={className.join(' ')}>\n        <div className='stats'>{this.formatTime(transcript.start)}, {this.formatSeconds(transcript.duration)}</div>\n        <p className='text'>{transcript.text}</p>\n      </div>\n    )\n  }\n\n  define = ()=>{\n    speecher.ignore();\n\n    speecher.setPrefix(commnads.prefix)\n\n    speecher.on(speecher.events.COMMAND, ()=>{\n      this.nextTip()\n    })\n\n    speecher.on(speecher.events.TRANSCRIPT, (transcriptObj)=>{\n      this.forceUpdate()\n    })\n\n    speecher.on(speecher.events.RESULT, (transcriptObj)=>{\n      this.append(transcriptObj)\n    })\n\n    speecher.on(speecher.events.IGNORE, ()=>{\n      this.setState({buttonType: secondary, buttonIcon: faMicrophoneAltSlash})\n    })\n\n    speecher.on(speecher.events.NOT_IGNORE, ()=>{\n      this.setState({buttonType: primary, buttonIcon: faMicrophoneAlt})\n    })\n\n    speecher.registerCommand(commnads.clearMessages, ()=>{\n      this.history = [];\n      this.forceUpdate()\n    })\n\n    speecher.registerCommand(commnads.insertMark, (command)=>{\n      this.append({\n        text: '---',\n        type: 'mark',\n        start: Date.now(),\n        end: Date.now(),\n        duration: 0\n      })\n    });\n\n    speecher.registerCommand(commnads.startLog, ()=>{\n      speecher.notIgnore();\n    })\n\n    speecher.registerCommand(commnads.endLog,()=>{\n      speecher.ignore();\n    })\n\n    speecher.registerCommand(commnads.cleanLastMessage, ()=>{\n      this.history.splice(-1,1);\n      this.forceUpdate();\n    })\n  }\n\n  formatTime = (time)=>{\n    const date = new Date(time)\n    return (\n      <span>{date.getHours().toString().padStart(2, '0')}:{date.getMinutes().toString().padStart(2, '0')}:{date.getSeconds().toString().padStart(2, '0')}</span>\n    );\n  }\n\n  formatSeconds = (time)=>{\n    const seconds = parseInt(time / 1000)\n    return (\n      <span>{seconds}s</span>\n    )\n  }\n\n  getHistory = ()=>{\n    const history = [];\n    for(let i in this.history){\n      let transcript = this.history[i];\n      history.push(this.createDialogBox(transcript))\n    }\n\n    return history\n  }\n\n  getCurrent = ()=>{\n    if (speecher.isIgnoring()) return null\n    const preview = speecher.getPreview()\n    if (preview.text.trim() == '') return null;\n    return(this.createDialogBox(preview, 'current'))\n  }\n\n  getColor = ()=>{\n    let color = '#54BF71'\n    if (speecher.isIgnoring()) color = '#F58F2A'\n    return color;\n  }\n\n  getTip = ()=>{\n    return tips[this.state.currentTip]\n  }\n\n  nextTip = ()=>{\n    let currentTip = this.state.currentTip + 1\n    if (currentTip >= tips.length) currentTip = 0\n    this.setState({currentTip})\n  }\n\n  render(){\n    return(\n      <div className='speecher-container'>\n        <div className='speecher-dialogs' ref={this.speecherDialogs}>\n          {this.getHistory()}\n          {this.getCurrent()}\n        </div>\n        <div className=\"speecher-dialogs-shade\"></div>\n        <div className=\"speecher-controller\">\n          <Button type={this.state.buttonType} icon={this.state.buttonIcon} onClick={()=>{this.toggle()}}/>\n          <Analyser color={this.getColor}/>\n        </div>\n        <div className=\"speecher-tip\">\n          {this.getTip()}\n        </div>\n      </div>\n    )\n  }\n  \n  scrollContainer = ()=>{\n    const el = this.speecherDialogs.current;\n    if(el){\n      el.scrollTo({top: el.scrollHeight, behavior: 'smooth'})\n    }\n  }\n\n  toggle = ()=>{\n    speecher.toggleIgnore();\n  }\n};\n","import React from \"react\";\nimport Speecher from \"./components/speecher\";\nexport default class App extends React.Component{\n  render(){\n    return(\n        <>\n            <Speecher/>\n        </>\n    )\n  }\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = {\n    prefix: 'computador',\n\n    cleanLastMessage: [\n        'limpar última mensagem',\n        'apagar última mensagem',\n        'remover última mensagem',\n        'limpar a última mensagem',\n        'apagar a última mensagem',\n        'remover a última mensagem',\n        \n        'remova a última mensagem',\n        'apague a última mensagem',\n        'limpe a última mensagem',\n        'remova somente a última mensagem',\n        'apague somente a última mensagem',\n        'limpe somente a última mensagem'\n    ],\n\n    clearMessages: [\n        'apagar mensagem',\n        'apagar mensagens',\n        'limpar mensagens',\n        'limpar mensagem',\n        'limpar log',\n        'apagar log',\n        'apagar todas as mensagens',\n        'limpar todas as mensagens'\n    ],\n\n    insertMark: [\n        'insira uma marcação',\n        'insira marcação',\n        'inserir marcação',\n        'inserir uma marcação',\n        'coloque uma marcação',\n        'coloque marcação',\n        'marcação'\n    ],\n\n    startLog: [\n        'iniciar log',\n        'iniciar transcrição',\n        'iniciar',\n        'retomar log',\n        'resumir log',\n        'resumir'\n    ],\n\n    endLog: [\n        'encerrar login',\n        'para login',\n        'encerrar log',\n        'encerrar transcrição',\n        'encerrar',\n        'parar log',\n        'pausar',\n        'pausa'\n    ]\n}"],"sourceRoot":""}